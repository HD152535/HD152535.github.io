<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://hd152535.github.io/</id><title>가람쥐's Blog</title><subtitle>A minimal, portfolio, sidebar, bootstrap Jekyll theme with responsive web design and focuses on text presentation.</subtitle> <updated>2022-01-26T15:20:50+09:00</updated> <author> <name>gaanii</name> <uri>https://hd152535.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://hd152535.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="en" href="https://hd152535.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator> <rights> © 2022 gaanii </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>[Swift] 데이터 타입 고급</title><link href="https://hd152535.github.io/posts/swift-datatype2/" rel="alternate" type="text/html" title="[Swift] 데이터 타입 고급" /><published>2022-01-12T21:34:00+09:00</published> <updated>2022-01-12T21:34:00+09:00</updated> <id>https://hd152535.github.io/posts/swift-datatype2/</id> <content src="https://hd152535.github.io/posts/swift-datatype2/" /> <author> <name>gaanii</name> </author> <category term="Programming" /> <category term="Swift" /> <summary> 본 게시물은 ‘스위프트 프로그래밍(3판)’을 정리하며 작성하는 게시글입니다. 아래 작성된 코드는 yagom님 swift 기본 문법의 코드를 사용했습니다. 타입 별칭 스위프트에서 기본으로 제공하는 데이터 타입이든, 사용자가 임의로 만든 데이터 타입이든 이미 존재하는 데이터 타입의 임의로 다른 이름(별칭)을 부여할 수 있다. 그런 다음 기본 타입 이름과 이후에 추가한 별칭을 모두 사용할 수 있다. » C언어 구조체에서의 typedef를 생각하면 될 것 같다. typealias MyInt = Int typealias YourInt = Int typealias MyDouble = Double let age: MyInt = 11 var year: YourInt = 2000 // MyInt도, You... </summary> </entry> <entry><title>[Swift] 데이터 타입 기본</title><link href="https://hd152535.github.io/posts/swift-datatype/" rel="alternate" type="text/html" title="[Swift] 데이터 타입 기본" /><published>2022-01-12T20:34:00+09:00</published> <updated>2022-01-12T20:34:00+09:00</updated> <id>https://hd152535.github.io/posts/swift-datatype/</id> <content src="https://hd152535.github.io/posts/swift-datatype/" /> <author> <name>gaanii</name> </author> <category term="Programming" /> <category term="Swift" /> <summary> 본 게시물은 ‘스위프트 프로그래밍(3판)’을 정리하며 작성하는 게시글입니다. 데이터 타입(자료형)이란 프로그램 내에서 다뤄지는 데이터의 종류를 의미합니다. 스위프트의 기본 데이터 타입은 구조체를 타입의 기반으로 삼아 스위프트의 다양한 기능(익스텐션, 제네릭 등)을 두루 사용하여 구현되어 있습니다. 스위프트의 모든 데이터 타입의 이름은 첫 글자가 대문자로 시작하는 대문자 카멜케이스를 사용합니다. Int &amp;amp; UInt 정수 타입을 의미한다. (현재는 기본적으로 Int는 64비트 정수형, UInt는 64비트 양의 정수형) Int는 +, -. 즉 부호가 있는 정수를 뜻하며, 이 중 - 부호를 포함하지 않는 0을 포함한 양의 정수는 UInt로 표현한다. 각각 데이터 타입의 최댓값... </summary> </entry> <entry><title>[전자계산기구조] Computer Architecture TA_Week10</title><link href="https://hd152535.github.io/posts/TA-week10/" rel="alternate" type="text/html" title="[전자계산기구조] Computer Architecture TA_Week10" /><published>2021-05-06T19:00:00+09:00</published> <updated>2022-01-10T03:34:16+09:00</updated> <id>https://hd152535.github.io/posts/TA-week10/</id> <content src="https://hd152535.github.io/posts/TA-week10/" /> <author> <name>gaanii</name> </author> <category term="ComputerArchitecture" /> <category term="TA" /> <summary> 기말고사 대비 개념정리 본 내용은 간단하고 빠르게 개념을 정리하기 위함으로, 모든 시험범위를 담고있지 않습니다. 📌 set on less than : slt slt $t0, $s0, $s1 # if $s0 &amp;lt; $s1 # then $t0 = 1 # else $t0 = 0 두 변수 간의 대소 비교가 필요할 때 사용되는 명령어 → 두 개의 근원지 레지스터의 값을 비교한 후 목적지 레지스터 값을 설정하는 명령어 → 첫 번째 근원지 레지스터의 값 &amp;lt; 두 번째 근원지 레지스터의 값 : 목적지 레지스터 값은 1 → 첫 번째 근원지 레지스터의 값 &amp;gt; 두 번째 근원... </summary> </entry> <entry><title>[전자계산기구조] Computer Architecture TA_Week7</title><link href="https://hd152535.github.io/posts/TA-week7/" rel="alternate" type="text/html" title="[전자계산기구조] Computer Architecture TA_Week7" /><published>2021-04-15T10:00:00+09:00</published> <updated>2022-01-10T03:34:16+09:00</updated> <id>https://hd152535.github.io/posts/TA-week7/</id> <content src="https://hd152535.github.io/posts/TA-week7/" /> <author> <name>gaanii</name> </author> <category term="ComputerArchitecture" /> <category term="TA" /> <summary> 중간고사 대비 개념 정리 본 내용은 간단하고 빠르게 개념을 정리하기 위함으로, 모든 시험범위를 담고있지 않습니다. 📌 Negative Numbers Signed Magnitude Most Significant Bit(MSB)는 sign bit로 사용된다. → 0은 positive, 1은 negative 0을 표현하는 방법이 2가지 존재한다. → +0은 0000, -0은 1000 -7 ~ +7까지 15개의 숫자만 표현 가능하다. Signed-1’s complement 2 - 1 - N으로 정의된다. Arithmetic works 6 — 1 = 6 + ( -1 ) = 0110 + 1110 = (1... </summary> </entry> <entry><title>[전자계산기구조] Computer Architecture TA_Week6</title><link href="https://hd152535.github.io/posts/TA-week6/" rel="alternate" type="text/html" title="[전자계산기구조] Computer Architecture TA_Week6" /><published>2021-04-08T12:50:00+09:00</published> <updated>2021-04-08T12:50:00+09:00</updated> <id>https://hd152535.github.io/posts/TA-week6/</id> <content src="https://hd152535.github.io/posts/TA-week6/" /> <author> <name>gaanii</name> </author> <category term="ComputerArchitecture" /> <category term="TA" /> <summary> 전자계산기구조TA_Week6 📌 Registers vs. Memory Register는 memory보다 더 빠르게 접근 가능함 memory data에서 동작하려면 load, store가 필요함 → 더 많은 연산이 필요함 Compiler는 가능한 변수들을 다루는데 Register를 사용해야 함 → 자주 사용하지 않는 변수는 memory에 spill → Resiter Optimization은 매우매우 중요함 ! 📌 Constant(or Immediate) Operands arithmetic instruction 내에 constant(상수)를 포함 → memory에서 load하는 경우보다 더 빠름 MIPS immediate instructio... </summary> </entry> </feed>
